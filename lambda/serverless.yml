service: video-broadcast

custom: 
  upload_bucket: video-upload-wezvqwefqef
  transcoded_bucket: video-transcoded-qezsdqwerqwr

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  profile: global
  region: us-east-1
  memorySize: 512
  iamRoleStatements: 
    - Effect: Allow
      Action: 
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::*"
    - Effect: Allow
      Action: 
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
        - elastictranscoder:*Preset
        - s3:List*
        - iam:List*
        - sns:List*
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action: 
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:us-east-1:373534280245:table/Videos"


functions:
  get-user-profile:
    handler: user-profile/index.handler
    events:
      - http:
          path: user-profile
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                accessToken: false
              headers:
                authorization: false
          authorizer:
            name: custom-authorizer
            identitySource: method.request.header.Authorization
    environment:
      AUTH0_DOMAIN: harold-mb.auth0.com

  custom-authorizer:
    handler: custom-authorizer/index.handler
    environment:
      AUTH0_DOMAIN: harold-mb.auth0.com   

  transcode-video:
    handler: transcode-video/index.handler
    events:
      - s3: 
          bucket: ${self:custom.upload_bucket}
          event: s3:ObjectCreated:*
    environment: 
      ELASTIC_TRANSCODER_PIPELINE_ID: 1526726798680-bq9661
      ELASTIC_TRANSCODER_REGION: us-east-1

  get-upload-policy: 
    handler: create-s3-upload-policy-document/index.handler
    events: 
      - http:
          path: s3-policy-document
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                accessToken: false
              headers:
                authorization: false
          authorizer:
            name: custom-authorizer
            identitySource: method.request.header.Authorization
    environment:
      ACCESS_KEY_ID: AKIAI5L5AC35GAYKC43Q
      SECRET_ACCESS_KEY: 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
      UPLOAD_BUCKET: ${self:custom.upload_bucket}
      UPLOAD_URI: https://s3.amazonaws.com

  push-transcoded-url-to-firebase: 
    handler: push-transcoded-url-to-firebase/index.handler
    events:
      - s3: 
          bucket: ${self:custom.transcoded_bucket}
          event: s3:ObjectCreated:*
    environment: 
      DATABASE_URL: https://harold-mb.firebaseio.com/
      S3_TRANSCODED_BUCKET_URL: https://s3.amazonaws.com/${self:custom.transcoded_bucket}
      SERVICE_ACCOUNT: harold-mb-key.json    

resources:
  Resources:
    S3BucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.transcoded_bucket}
        PolicyDocument:
          Statement:
            - Principal: "*"
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: "AddPerm"
              Resource: arn:aws:s3:::${self:custom.transcoded_bucket}/*