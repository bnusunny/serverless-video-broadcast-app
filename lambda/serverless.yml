service: video-broadcast

custom: 
  upload_bucket: video-upload-qejsadfqwefadfafqwef-${opt:stage, self:provider.stage}
  transcoded_bucket: video-transcoded-yewnsdiqsdfq-${opt:stage, self:provider.stage}
  dlq_sns_arn: arn:aws:sns:ap-northeast-1:373534280245:prod-alert
  elastic_transcoder_pipelineid: 
    dev: 1536490765349-wdq1g6
    prod:   

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  profile: global
  region: ap-northeast-1
  memorySize: 512
  timeout: 30
  iamRoleStatements: 
    - Effect: Allow
      Action: 
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::*"
    - Effect: Allow
      Action: 
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
        - elastictranscoder:*Preset
        - s3:List*
        - iam:List*
        - sns:List*
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetItem
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        - dynamodb:Scan
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"
    - Effect: Allow
      Action: 
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:ap-northeast-1:373534280245:table/Videos"
    - Effect: Allow
      Action: 
        - sns:Publish
      Resource: "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"


functions:
  get-user-profile:
    handler: user-profile/index.handler
    onError: ${self:custom.dlq_sns_arn}
    events:
      - http:
          path: user-profile
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                accessToken: false
              headers:
                Authorization: false
          authorizer:
            name: custom-authorizer
            identitySource: method.request.header.Authorization
    environment:
      AUTH0_DOMAIN: harold-mb.auth0.com

  custom-authorizer:
    handler: custom-authorizer/index.handler
    onError: ${self:custom.dlq_sns_arn}
    environment:
      AUTH0_DOMAIN: harold-mb.auth0.com   

  transcode-video:
    handler: transcode-video/index.handler
    onError: ${self:custom.dlq_sns_arn}
    # events:
    #   - s3: 
    #       bucket: ${self:custom.upload_bucket}
    #       event: s3:ObjectCreated:*
    environment: 
      ELASTIC_TRANSCODER_PIPELINE_ID: ${self:custom.elastic_transcoder_pipelineid.${opt:stage, self:provider.stage}}
      ELASTIC_TRANSCODER_REGION: ap-northeast-1

  get-upload-policy: 
    handler: create-s3-upload-policy-document/index.handler
    onError: ${self:custom.dlq_sns_arn}
    events: 
      - http:
          path: s3-policy-document
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                accessToken: false
              headers:
                Authorization: false
          authorizer:
            name: custom-authorizer
            identitySource: method.request.header.Authorization
    environment:
      ACCESS_KEY_ID: update-AK
      SECRET_ACCESS_KEY: update-SK
      UPLOAD_BUCKET: ${self:custom.upload_bucket}
      UPLOAD_URI: https://s3.amazonaws.com

  push-transcoded-url-to-db: 
    handler: push-transcoded-url-to-db/index.handler
    onError: ${self:custom.dlq_sns_arn}
    events:
      - sns: arn:aws:sns:ap-northeast-1:373534280245:video-transcode-complete
    environment: 
      S3_TRANSCODED_BUCKET_URL: https://dr8yjtnfa00ar.cloudfront.net

  get-all-videos: 
    handler: get-all-videos/index.handler 
    onError: ${self:custom.dlq_sns_arn} 
    events: 
      - http:
          path: all-videos
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                accessToken: false
              headers:
                Authorization: false
          authorizer:
            name: custom-authorizer
            identitySource: method.request.header.Authorization

resources:
  Resources:
    S3BucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.transcoded_bucket}
        PolicyDocument:
          Statement:
            - Principal: "*"
              Action:
                - s3:GetObject
              Effect: Allow
              Sid: "AddPerm"
              Resource: arn:aws:s3:::${self:custom.transcoded_bucket}/*