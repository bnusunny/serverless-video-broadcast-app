{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "GetDashuserDashprofileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-get-user-profile"
      }
    },
    "CustomDashauthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-custom-authorizer"
      }
    },
    "TranscodeDashvideoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-transcode-video"
      }
    },
    "GetDashuploadDashpolicyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-get-upload-policy"
      }
    },
    "PushDashtranscodedDashurlDashtoDashdbLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db"
      }
    },
    "GetDashallDashvideosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/video-broadcast-dev-get-all-videos"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "video-broadcast",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-user-profile:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-custom-authorizer:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-transcode-video:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-upload-policy:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-all-videos:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-user-profile:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-custom-authorizer:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-transcode-video:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-upload-policy:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-all-videos:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "elastictranscoder:Read*",
                    "elastictranscoder:List*",
                    "elastictranscoder:*Job",
                    "elastictranscoder:*Preset",
                    "s3:List*",
                    "iam:List*",
                    "sns:List*",
                    "dynamodb:DescribeStream",
                    "dynamodb:GetRecords",
                    "dynamodb:GetItem",
                    "dynamodb:GetShardIterator",
                    "dynamodb:ListStreams",
                    "dynamodb:Scan",
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Resource": "arn:aws:dynamodb:ap-northeast-1:373534280245:table/Videos"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": [
                    "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "video-broadcast",
              "dev",
              "ap-northeast-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetDashuserDashprofileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-get-user-profile",
        "Handler": "user-profile/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        },
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "harold-mb.auth0.com"
          }
        }
      },
      "DependsOn": [
        "GetDashuserDashprofileLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetDashuserDashprofileLambdaVersionxuaf6mq9NamLOVfA1WL1nxRe2PFE7ciWpMML6rW1Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashuserDashprofileLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "CustomDashauthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-custom-authorizer",
        "Handler": "custom-authorizer/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        },
        "Environment": {
          "Variables": {
            "AUTH0_DOMAIN": "harold-mb.auth0.com"
          }
        }
      },
      "DependsOn": [
        "CustomDashauthorizerLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "CustomDashauthorizerLambdaVersionogDLPb19Er0UXWtzCjNoBNmliWbmAnnyRcJnuzAj87g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CustomDashauthorizerLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "TranscodeDashvideoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-transcode-video",
        "Handler": "transcode-video/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        },
        "Environment": {
          "Variables": {
            "ELASTIC_TRANSCODER_PIPELINE_ID": "1536490765349-wdq1g6",
            "ELASTIC_TRANSCODER_REGION": "ap-northeast-1"
          }
        }
      },
      "DependsOn": [
        "TranscodeDashvideoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "TranscodeDashvideoLambdaVersionNhuhwxLXzFknVrbZWjniNNYRk61jxO3vIZ41FEaIrs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TranscodeDashvideoLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "GetDashuploadDashpolicyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-get-upload-policy",
        "Handler": "create-s3-upload-policy-document/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        },
        "Environment": {
          "Variables": {
            "ACCESS_KEY_ID": "AKIAI5L5AC35GAYKC43Q",
            "SECRET_ACCESS_KEY": "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",
            "UPLOAD_BUCKET": "video-upload-qejsadfqwefadfafqwef-dev",
            "UPLOAD_URI": "https://s3.amazonaws.com"
          }
        }
      },
      "DependsOn": [
        "GetDashuploadDashpolicyLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetDashuploadDashpolicyLambdaVersionrShTEnvNYAPyxBefQkMgsSLM7qedttbcSLYxzmLDMMM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashuploadDashpolicyLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "PushDashtranscodedDashurlDashtoDashdbLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-push-transcoded-url-to-db",
        "Handler": "push-transcoded-url-to-db/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        },
        "Environment": {
          "Variables": {
            "S3_TRANSCODED_BUCKET_URL": "https://dr8yjtnfa00ar.cloudfront.net"
          }
        }
      },
      "DependsOn": [
        "PushDashtranscodedDashurlDashtoDashdbLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PushDashtranscodedDashurlDashtoDashdbLambdaVersionT9pwjpjBtgnlTO6OxvfGYbuFPBaqVCbNUJSxG1XOO5E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PushDashtranscodedDashurlDashtoDashdbLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "GetDashallDashvideosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/video-broadcast/dev/1537114154231-2018-09-16T16:09:14.231Z/video-broadcast.zip"
        },
        "FunctionName": "video-broadcast-dev-get-all-videos",
        "Handler": "get-all-videos/index.handler",
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "DeadLetterConfig": {
          "TargetArn": "arn:aws:sns:ap-northeast-1:373534280245:prod-alert"
        }
      },
      "DependsOn": [
        "GetDashallDashvideosLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "GetDashallDashvideosLambdaVersionuYEdWu0qkRgeM5lryPzG10viFal41ozFQxz206nw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDashallDashvideosLambdaFunction"
        },
        "CodeSha256": "ev0KxP49CZcXql8qB/3h0gI4SxvWPCZwePPK2sM88z4="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-video-broadcast",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceUserDashprofile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user-profile",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceS3DashpolicyDashdocument": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "s3-policy-document",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAllDashvideos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "all-videos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserDashprofileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserDashprofile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodS3DashpolicyDashdocumentOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceS3DashpolicyDashdocument"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAllDashvideosOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllDashvideos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserDashprofileGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.accessToken": false,
          "method.request.header.Authorization": false
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserDashprofile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashuserDashprofileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodS3DashpolicyDashdocumentGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.accessToken": false,
          "method.request.header.Authorization": false
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceS3DashpolicyDashdocument"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashuploadDashpolicyLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "ApiGatewayMethodAllDashvideosGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.accessToken": false,
          "method.request.header.Authorization": false
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllDashvideos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetDashallDashvideosLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
    },
    "CustomDashauthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 300,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "custom-authorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "CustomDashauthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1537114154653": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodUserDashprofileGet",
        "ApiGatewayMethodS3DashpolicyDashdocumentGet",
        "ApiGatewayMethodAllDashvideosGet"
      ]
    },
    "GetDashuserDashprofileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashuserDashprofileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CustomDashauthorizerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CustomDashauthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        }
      }
    },
    "GetDashuploadDashpolicyLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashuploadDashpolicyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetDashallDashvideosLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDashallDashvideosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PushDashtranscodedDashurlDashtoDashdbSnsSubscriptionVideotranscodecomplete": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": "arn:aws:sns:ap-northeast-1:373534280245:video-transcode-complete",
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "PushDashtranscodedDashurlDashtoDashdbLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "PushDashtranscodedDashurlDashtoDashdbLambdaPermissionVideotranscodecompleteSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PushDashtranscodedDashurlDashtoDashdbLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "sns.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": "arn:aws:sns:ap-northeast-1:373534280245:video-transcode-complete"
      }
    },
    "S3BucketPermissions": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": "video-transcoded-yewnsdiqsdfq-dev",
        "PolicyDocument": {
          "Statement": [
            {
              "Principal": "*",
              "Action": [
                "s3:GetObject"
              ],
              "Effect": "Allow",
              "Sid": "AddPerm",
              "Resource": "arn:aws:s3:::video-transcoded-yewnsdiqsdfq-dev/*"
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "GetDashuserDashprofileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashuserDashprofileLambdaVersionxuaf6mq9NamLOVfA1WL1nxRe2PFE7ciWpMML6rW1Y"
      }
    },
    "CustomDashauthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CustomDashauthorizerLambdaVersionogDLPb19Er0UXWtzCjNoBNmliWbmAnnyRcJnuzAj87g"
      }
    },
    "TranscodeDashvideoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TranscodeDashvideoLambdaVersionNhuhwxLXzFknVrbZWjniNNYRk61jxO3vIZ41FEaIrs"
      }
    },
    "GetDashuploadDashpolicyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashuploadDashpolicyLambdaVersionrShTEnvNYAPyxBefQkMgsSLM7qedttbcSLYxzmLDMMM"
      }
    },
    "PushDashtranscodedDashurlDashtoDashdbLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PushDashtranscodedDashurlDashtoDashdbLambdaVersionT9pwjpjBtgnlTO6OxvfGYbuFPBaqVCbNUJSxG1XOO5E"
      }
    },
    "GetDashallDashvideosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDashallDashvideosLambdaVersionuYEdWu0qkRgeM5lryPzG10viFal41ozFQxz206nw"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.ap-northeast-1.",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}