{
  "service": {
    "service": "video-broadcast",
    "serviceObject": {
      "name": "video-broadcast"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "profile": "global",
      "memorySize": 512,
      "timeout": 30,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject"
          ],
          "Resource": "arn:aws:s3:::*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "elastictranscoder:Read*",
            "elastictranscoder:List*",
            "elastictranscoder:*Job",
            "elastictranscoder:*Preset",
            "s3:List*",
            "iam:List*",
            "sns:List*",
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetItem",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
            "dynamodb:Scan",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:PutItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:373534280245:table/Videos"
        },
        {
          "Effect": "Allow",
          "Action": [
            "sns:Publish"
          ],
          "Resource": "arn:aws:sns:us-east-1:373534280245:prod-alert"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          },
          "GetDashuserDashprofileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-get-user-profile"
            }
          },
          "CustomDashauthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-custom-authorizer"
            }
          },
          "TranscodeDashvideoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-transcode-video"
            }
          },
          "GetDashuploadDashpolicyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-get-upload-policy"
            }
          },
          "PushDashtranscodedDashurlDashtoDashdbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db"
            }
          },
          "GetDashallDashvideosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/video-broadcast-dev-get-all-videos"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "video-broadcast",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-user-profile:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-custom-authorizer:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-transcode-video:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-upload-policy:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-all-videos:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-user-profile:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-custom-authorizer:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-transcode-video:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-upload-policy:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-push-transcoded-url-to-db:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/video-broadcast-dev-get-all-videos:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": [
                          "arn:aws:sns:us-east-1:373534280245:prod-alert"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "video-broadcast",
                    "dev",
                    "us-east-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetDashuserDashprofileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-get-user-profile",
              "Handler": "user-profile/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              },
              "Environment": {
                "Variables": {
                  "AUTH0_DOMAIN": "harold-mb.auth0.com"
                }
              }
            },
            "DependsOn": [
              "GetDashuserDashprofileLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDashuserDashprofileLambdaVersionhOKLjsNGtGmTAcfdTD2FW6GeVouyAccp8hQMy1rh5o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashuserDashprofileLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "CustomDashauthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-custom-authorizer",
              "Handler": "custom-authorizer/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              },
              "Environment": {
                "Variables": {
                  "AUTH0_DOMAIN": "harold-mb.auth0.com"
                }
              }
            },
            "DependsOn": [
              "CustomDashauthorizerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CustomDashauthorizerLambdaVersion2DOSRvec6olsdSVvlwSFoYe5pcofjxsOaJhuYrzQA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CustomDashauthorizerLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "TranscodeDashvideoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-transcode-video",
              "Handler": "transcode-video/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              },
              "Environment": {
                "Variables": {
                  "ELASTIC_TRANSCODER_PIPELINE_ID": "1526726798680-bq9661",
                  "ELASTIC_TRANSCODER_REGION": "us-east-1"
                }
              }
            },
            "DependsOn": [
              "TranscodeDashvideoLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "TranscodeDashvideoLambdaVersionzjTwovGMUs9lE0nir8rNMVPBI9VUxLv2o5TsfHbrE8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TranscodeDashvideoLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "GetDashuploadDashpolicyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-get-upload-policy",
              "Handler": "create-s3-upload-policy-document/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              },
              "Environment": {
                "Variables": {
                  "ACCESS_KEY_ID": "AKIAI5L5AC35GAYKC43Q",
                  "SECRET_ACCESS_KEY": "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",
                  "UPLOAD_BUCKET": "video-upload-wezvqwefqef-dev",
                  "UPLOAD_URI": "https://s3.amazonaws.com"
                }
              }
            },
            "DependsOn": [
              "GetDashuploadDashpolicyLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDashuploadDashpolicyLambdaVersionrJPL72eXJl35DwOz0Uq5CftbpKYJu8slYnpZZZD9So": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashuploadDashpolicyLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "PushDashtranscodedDashurlDashtoDashdbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-push-transcoded-url-to-db",
              "Handler": "push-transcoded-url-to-db/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              },
              "Environment": {
                "Variables": {
                  "S3_TRANSCODED_BUCKET_URL": "https://dit0x3orc1zbj.cloudfront.net"
                }
              }
            },
            "DependsOn": [
              "PushDashtranscodedDashurlDashtoDashdbLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PushDashtranscodedDashurlDashtoDashdbLambdaVersionIkYz0emu3qvHsG3TXV4yY51c0CfjCnRqLI3zAYxuA0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PushDashtranscodedDashurlDashtoDashdbLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "GetDashallDashvideosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z/video-broadcast.zip"
              },
              "FunctionName": "video-broadcast-dev-get-all-videos",
              "Handler": "get-all-videos/index.handler",
              "MemorySize": 512,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 30,
              "DeadLetterConfig": {
                "TargetArn": "arn:aws:sns:us-east-1:373534280245:prod-alert"
              }
            },
            "DependsOn": [
              "GetDashallDashvideosLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDashallDashvideosLambdaVersionoFsVCruLNtG0s3BALpwb1pSroQZBEvDJFKWMtD4y8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashallDashvideosLambdaFunction"
              },
              "CodeSha256": "gHfd1jIszdTvQa0Ed7ejlxCT7QyZcySMl2K8as0GQoA="
            }
          },
          "S3BucketVideouploadwezvqwefqefdev": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "video-upload-wezvqwefqef-dev",
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "TranscodeDashvideoLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            },
            "DependsOn": [
              "TranscodeDashvideoLambdaPermissionVideouploadwezvqwefqefdevS3"
            ]
          },
          "TranscodeDashvideoLambdaPermissionVideouploadwezvqwefqefdevS3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TranscodeDashvideoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "s3.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":s3:::video-upload-wezvqwefqef-dev"
                  ]
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-video-broadcast",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceUserDashprofile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user-profile",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceS3DashpolicyDashdocument": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "s3-policy-document",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllDashvideos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "all-videos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserDashprofileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserDashprofile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodS3DashpolicyDashdocumentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceS3DashpolicyDashdocument"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAllDashvideosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllDashvideos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserDashprofileGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.accessToken": false,
                "method.request.header.Authorization": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserDashprofile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashuserDashprofileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodS3DashpolicyDashdocumentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.accessToken": false,
                "method.request.header.Authorization": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceS3DashpolicyDashdocument"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashuploadDashpolicyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAllDashvideosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.accessToken": false,
                "method.request.header.Authorization": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllDashvideos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "CustomDashauthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashallDashvideosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "CustomDashauthorizerApiGatewayAuthorizer"
          },
          "CustomDashauthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "custom-authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CustomDashauthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1529715047948": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUserDashprofileGet",
              "ApiGatewayMethodS3DashpolicyDashdocumentGet",
              "ApiGatewayMethodAllDashvideosGet"
            ]
          },
          "GetDashuserDashprofileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashuserDashprofileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CustomDashauthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CustomDashauthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              }
            }
          },
          "GetDashuploadDashpolicyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashuploadDashpolicyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashallDashvideosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashallDashvideosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "apigateway.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PushDashtranscodedDashurlDashtoDashdbSnsSubscriptionVideotranscodecomplete": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": "arn:aws:sns:us-east-1:373534280245:video-transcode-complete",
              "Protocol": "lambda",
              "Endpoint": {
                "Fn::GetAtt": [
                  "PushDashtranscodedDashurlDashtoDashdbLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "PushDashtranscodedDashurlDashtoDashdbLambdaPermissionVideotranscodecompleteSNS": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PushDashtranscodedDashurlDashtoDashdbLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": {
                "Fn::Join": [
                  "",
                  [
                    "sns.",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "SourceArn": "arn:aws:sns:us-east-1:373534280245:video-transcode-complete"
            }
          },
          "S3BucketPermissions": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": "video-transcoded-qezsdqwerqwr-dev",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Principal": "*",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Effect": "Allow",
                    "Sid": "AddPerm",
                    "Resource": "arn:aws:s3:::video-transcoded-qezsdqwerqwr-dev/*"
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GetDashuserDashprofileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashuserDashprofileLambdaVersionhOKLjsNGtGmTAcfdTD2FW6GeVouyAccp8hQMy1rh5o"
            }
          },
          "CustomDashauthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CustomDashauthorizerLambdaVersion2DOSRvec6olsdSVvlwSFoYe5pcofjxsOaJhuYrzQA"
            }
          },
          "TranscodeDashvideoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TranscodeDashvideoLambdaVersionzjTwovGMUs9lE0nir8rNMVPBI9VUxLv2o5TsfHbrE8"
            }
          },
          "GetDashuploadDashpolicyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashuploadDashpolicyLambdaVersionrJPL72eXJl35DwOz0Uq5CftbpKYJu8slYnpZZZD9So"
            }
          },
          "PushDashtranscodedDashurlDashtoDashdbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PushDashtranscodedDashurlDashtoDashdbLambdaVersionIkYz0emu3qvHsG3TXV4yY51c0CfjCnRqLI3zAYxuA0"
            }
          },
          "GetDashallDashvideosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashallDashvideosLambdaVersionoFsVCruLNtG0s3BALpwb1pSroQZBEvDJFKWMtD4y8"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.us-east-1.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "upload_bucket": "video-upload-wezvqwefqef-dev",
      "transcoded_bucket": "video-transcoded-qezsdqwerqwr-dev",
      "dlq_sns_arn": "arn:aws:sns:us-east-1:373534280245:prod-alert",
      "elastic_transcoder_pipelineid": {
        "dev": "1526726798680-bq9661",
        "prod": null
      }
    },
    "functions": {
      "get-user-profile": {
        "handler": "user-profile/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "events": [
          {
            "http": {
              "path": "user-profile",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.querystring.accessToken": false,
                  "method.request.header.Authorization": false
                }
              },
              "authorizer": {
                "name": "custom-authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "CustomDashauthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "AUTH0_DOMAIN": "harold-mb.auth0.com"
        },
        "name": "video-broadcast-dev-get-user-profile",
        "package": {},
        "vpc": {}
      },
      "custom-authorizer": {
        "handler": "custom-authorizer/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "environment": {
          "AUTH0_DOMAIN": "harold-mb.auth0.com"
        },
        "events": [],
        "name": "video-broadcast-dev-custom-authorizer",
        "package": {},
        "vpc": {}
      },
      "transcode-video": {
        "handler": "transcode-video/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "events": [
          {
            "s3": {
              "bucket": "video-upload-wezvqwefqef-dev",
              "event": "s3:ObjectCreated:*"
            }
          }
        ],
        "environment": {
          "ELASTIC_TRANSCODER_PIPELINE_ID": "1526726798680-bq9661",
          "ELASTIC_TRANSCODER_REGION": "us-east-1"
        },
        "name": "video-broadcast-dev-transcode-video",
        "package": {},
        "vpc": {}
      },
      "get-upload-policy": {
        "handler": "create-s3-upload-policy-document/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "events": [
          {
            "http": {
              "path": "s3-policy-document",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.querystring.accessToken": false,
                  "method.request.header.Authorization": false
                }
              },
              "authorizer": {
                "name": "custom-authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "CustomDashauthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "environment": {
          "ACCESS_KEY_ID": "AKIAI5L5AC35GAYKC43Q",
          "SECRET_ACCESS_KEY": "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",
          "UPLOAD_BUCKET": "video-upload-wezvqwefqef-dev",
          "UPLOAD_URI": "https://s3.amazonaws.com"
        },
        "name": "video-broadcast-dev-get-upload-policy",
        "package": {},
        "vpc": {}
      },
      "push-transcoded-url-to-db": {
        "handler": "push-transcoded-url-to-db/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "events": [
          {
            "sns": "arn:aws:sns:us-east-1:373534280245:video-transcode-complete"
          }
        ],
        "environment": {
          "S3_TRANSCODED_BUCKET_URL": "https://dit0x3orc1zbj.cloudfront.net"
        },
        "name": "video-broadcast-dev-push-transcoded-url-to-db",
        "package": {},
        "vpc": {}
      },
      "get-all-videos": {
        "handler": "get-all-videos/index.handler",
        "onError": "arn:aws:sns:us-east-1:373534280245:prod-alert",
        "events": [
          {
            "http": {
              "path": "all-videos",
              "method": "get",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "request": {
                "parameters": {
                  "method.request.querystring.accessToken": false,
                  "method.request.header.Authorization": false
                }
              },
              "authorizer": {
                "name": "custom-authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "CustomDashauthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "video-broadcast-dev-get-all-videos",
        "package": {},
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "S3BucketPermissions": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": "video-transcoded-qezsdqwerqwr-dev",
            "PolicyDocument": {
              "Statement": [
                {
                  "Principal": "*",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Sid": "AddPerm",
                  "Resource": "arn:aws:s3:::video-transcoded-qezsdqwerqwr-dev/*"
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "artifact": "/Users/sunhua/Documents/Projects/github.com/bnusunny/serverless-video-broadcast-app/lambda/.serverless/video-broadcast.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/video-broadcast/dev/1529715047579-2018-06-23T00:50:47.579Z",
    "artifact": "video-broadcast.zip"
  }
}